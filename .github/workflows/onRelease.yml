name: publish

on:
  release:
    types: [released]

jobs:
  # build-and-push-to-npm:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.x'
  #         registry-url: 'https://registry.npmjs.org'
  #     - name: Install dependencies and build ðŸ”§
  #       run: yarn install --frozen-lockfile && yarn build
  #     - name: Publish package on NPM ðŸ“¦
  #       run: |
  #         yarn config set version-tag-prefix "v"
  #         yarn config set version-git-tag false
  #         echo "RELEASE_VERSION: ${{ github.event.release.tag_name }}"
  #         yarn version --new-version ${{ github.event.release.tag_name }}
  #         yarn publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  # build-and-push-to-s3:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: short-sha
  #       run: |
  #         short_sha=$(echo ${{github.sha}} | head -c 7)
  #         echo "::set-output name=short_sha::$short_sha"
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.x'
  #         registry-url: 'https://registry.npmjs.org'
  #     - name: Install dependencies and build ðŸ”§
  #       run: yarn install --frozen-lockfile && yarn build
  #     - name: Publish package on NPM ðŸ“¦
  #       run: |
  #         yarn config set version-tag-prefix "v"
  #         yarn config set version-git-tag false
  #         echo "RELEASE_VERSION: ${{ github.event.release.tag_name }}"
  #         yarn version --new-version ${{ github.event.release.tag_name }}
  #         yarn oclif pack tarballs -t darwin-arm64,darwin-x64,linux-x64,linux-arm
  #         yarn oclif upload tarballs -t darwin-arm64,darwin-x64,linux-x64,linux-arm
  #         yarn oclif promote -t darwin-arm64,darwin-x64,linux-x64,linux-arm --version ${{ github.event.release.tag_name }} --sha ${{ steps.short-sha.outputs.short_sha }}
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - name: Publish darwin-arm64 tarball to github
  #       id: upload-release-asset-darwin-arm64
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: './dist/dgctl-v${{ github.event.release.tag_name }}-${{ steps.short-sha.outputs.short_sha }}-darwin-arm64.tar.gz'
  #         asset_name: dgctl-darwin-arm64.tar.gz
  #         asset_content_type: application/zip
  #     - name: Publish darwin-x64 tarball to github
  #       id: upload-release-asset-darwin-x64 
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: './dist/dgctl-v${{ github.event.release.tag_name }}-${{ steps.short-sha.outputs.short_sha }}-darwin-x64.tar.gz'
  #         asset_name: dgctl-darwin-x64.tar.gz
  #         asset_content_type: application/zip
  #     - name: Publish linux-arm tarball to github
  #       id: upload-release-asset-linux-arm
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: './dist/dgctl-v${{ github.event.release.tag_name }}-${{ steps.short-sha.outputs.short_sha }}-linux-arm.tar.gz'
  #         asset_name: dgctl-linux-arm.tar.gz
  #         asset_content_type: application/zip
  #     - name: Publish linux-x64 tarball to github
  #       id: upload-release-asset-linux-x64
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: './dist/dgctl-v${{ github.event.release.tag_name }}-${{ steps.short-sha.outputs.short_sha }}-linux-x64.tar.gz'
  #         asset_name: dgctl-linux-x64.tar.gz
  #         asset_content_type: application/zip
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and publish docker
  #       id: build-and-upload-docker-image
  #       run: |
  #         docker build -t dgctl:${{ github.event.release.tag_name }} -t dgctl:latest .
  #         docker push dgctl:${{ github.event.release.tag_name }}
  #         docker push dgctl:latest

  build-and-push-to-docker:
    runs-on: ubuntu-latest
    steps:
      - id: short-sha
        run: |
          short_sha=$(echo ${{github.sha}} | head -c 7)
          echo "::set-output name=short_sha::$short_sha"
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and publish docker
        id: build-and-upload-docker-image
        run: |
          docker buildx build --platform=linux/amd64,linux/arm64,linux/arm  -t dockerdiggerorg/dgctl:${{ github.event.release.tag_name }} -t dockerdiggerorg/dgctl:latest .
          docker push dockerdiggerorg/dgctl:${{ github.event.release.tag_name }}
          docker push dockerdiggerorg/dgctl:latest
